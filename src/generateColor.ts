import randomSeed from "random-seed";

/**
 * Generates a color with random distribution, stable for a given semver
 * version. Allows passing an `avoidToken` generated by a previous color, to avoid a color similar
 * to it.
 *
 * * Derived from:
 * - http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
 * - https://github.com/devongovett/color-generator
 */
export default function generateColor(
  version: string,
  avoidToken?: number
): { color: string; avoidToken: number } {
  const avoidIfHueWithin = 0.1;
  const goldenRatio = 0.618033988749895;

  const randomGenerator = randomSeed.create(version);
  let hue: number;
  do {
    hue = randomGenerator.random();
    hue += goldenRatio;
    hue %= 1;
  } while (avoidToken && Math.abs(hue - avoidToken) <= avoidIfHueWithin);

  const saturation = 0.9;
  const value = 0.85;

  const h = hue * 360;
  const s = saturation * 100;
  const v = value * 100;

  return { color: cssColorFromHsv(h, s, v), avoidToken: hue };
}

function cssColorFromHsv(hue: number, sat: number, val: number) {
  const h = hue;
  const l = ((2 - sat / 100) * val) / 2;
  const s = (sat * val) / (l < 50 ? l * 2 : 200 - l * 2);

  return `hsl(${h}, ${Math.round(s)}%, ${Math.round(l)}%)`;
}
